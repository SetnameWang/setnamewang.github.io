{"version":3,"sources":["App.js","reportWebVitals.js","index.js","Account/Account.js"],"names":["LoginPromise","Login","React","lazy","InnerPromise","Inner","App","state","isLogin","account","on","setState","Fragment","Suspense","fallback","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","token","expire","checkState","recall","onLogin","onLogout","type","push","forEach","item","i","localStorage","getItem","JSON","parse","console","debug","Date","now","stringify","setItem"],"mappings":"yNAGMA,EAAe,8BACfC,EAAQC,IAAMC,MAAK,kBAAMH,KAEzBI,EAAe,oDACfC,EAAQH,IAAMC,MAAK,kBAAMC,KA0ChBE,E,kDA5Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,QAASC,IAAQD,WAHR,E,qDAQb,WAAoB,IAAD,OACjBC,IAAQC,GAAG,SAAS,WAClB,EAAKC,SAAS,CAACH,SAAS,OAE1BC,IAAQC,GAAG,UAAU,WACnB,EAAKC,SAAS,CAACH,SAAS,S,oBAI5B,WACE,OACE,cAAC,IAAMI,SAAP,UACE,cAAC,IAAMC,SAAP,CAAgBC,SAAS,UAAzB,SACGC,KAAKR,MAAMC,QAAU,cAACH,EAAD,IAAY,cAACJ,EAAD,Y,GAtB1BC,IAAMc,WCRTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,mFCwEWR,EAAU,I,WAvFnB,aAAc,oBACZM,KAAKR,MAAQ,CACXC,SAAS,EACTuB,MAAO,GACPC,OAAQ,GAGVjB,KAAKkB,aACLlB,KAAKmB,OAAS,CACZC,QAAS,GACTC,SAAU,I,sCAKd,SAAGC,EAAMH,GACP,OAAQG,GACN,IAAK,QACHtB,KAAKmB,OAAOC,QAAQG,KAAKJ,GACzB,MACF,IAAK,SACHnB,KAAKmB,OAAOE,SAASE,KAAKJ,M,qBAOhC,WACEnB,KAAKmB,OAAOC,QAAQI,SAAQ,SAACC,EAAMC,GAEjCD,S,sBAKJ,WACEzB,KAAKmB,OAAOE,SAASG,SAAQ,SAACC,EAAMC,GAElCD,S,qBAIJ,WACE,OAAOzB,KAAKR,MAAMC,U,wBAGpB,WAEE,IAAID,EAAQmC,aAAaC,QAAQ,cAC5BpC,IAGLA,EAAQqC,KAAKC,MAAMtC,GACnBuC,QAAQC,MAAMxC,GAEVA,EAAMyB,OAASgB,KAAKC,OACtBH,QAAQC,MAAM,gBACdhC,KAAKR,MAAQ,CACXC,SAAS,IAIXO,KAAKR,MAAQ,CACXC,QAASD,EAAMC,QACfuB,MAAOxB,EAAMwB,MACbC,OAAQzB,EAAMyB,W,mBAKpB,WAGEjB,KAAKR,MAAQ,CACXC,SAAS,EACTuB,MAAO,MACPC,OAAQgB,KAAKC,MAAQ,KAIvB,IAAM1C,EAAQqC,KAAKM,UAAUnC,KAAKR,OAClCmC,aAAaS,QAAQ,aAAc5C,GACnCQ,KAAKoB,c","file":"static/js/main.2aca6821.chunk.js","sourcesContent":["import React from 'react';\nimport {account} from './Account/Account.js';\n\nconst LoginPromise = import(\"./Account/Login.js\");\nconst Login = React.lazy(() => LoginPromise);\n\nconst InnerPromise = import(\"./Inner/Inner.js\");\nconst Inner = React.lazy(() => InnerPromise);\n/*\n// lazy import rest components\nconst Login = React.lazy(() =>\n  import('./Account/Login.js')\n)\n\nconst Dashboard = React.lazy(() =>\n  import('./Dashboard/Dashboard.js')\n)\n*/\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      isLogin: account.isLogin(),\n    }\n  }\n\n  // regist event to account while component mounted\n  componentDidMount(){\n    account.on(\"login\", ()=>{\n      this.setState({isLogin: true});\n    });\n    account.on(\"logout\", ()=>{\n      this.setState({isLogin: false});\n    });\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <React.Suspense fallback=\"loading\">\n          {this.state.isLogin ? <Inner /> : <Login />}\n        </React.Suspense>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","class Account{\r\n  constructor(){\r\n    this.state = {\r\n      isLogin: false,\r\n      token: \"\",\r\n      expire: 0,\r\n    }\r\n    //this.login();\r\n    this.checkState();\r\n    this.recall = {\r\n      onLogin: [],\r\n      onLogout: [],\r\n    }\r\n  }\r\n\r\n  // event register\r\n  on(type, recall){\r\n    switch (type) {\r\n      case \"login\":\r\n        this.recall.onLogin.push(recall);\r\n        break;\r\n      case \"logout\":\r\n        this.recall.onLogout.push(recall);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  // event triger\r\n  onLogin(){\r\n    this.recall.onLogin.forEach((item, i) => {\r\n      /* todo */\r\n      item();\r\n    });\r\n  }\r\n\r\n  // event triger\r\n  onLogout(){\r\n    this.recall.onLogout.forEach((item, i) => {\r\n      /* todo */\r\n      item();\r\n    });\r\n  }\r\n\r\n  isLogin(){\r\n    return this.state.isLogin;\r\n  }\r\n\r\n  checkState(){\r\n    // get login state from local storage\r\n    var state = localStorage.getItem(\"loginState\");\r\n    if (!state){\r\n      return;\r\n    }\r\n    state = JSON.parse(state);\r\n    console.debug(state);\r\n    // if state has expire\r\n    if (state.expire < Date.now()){\r\n      console.debug(\"login expire\");\r\n      this.state = {\r\n        isLogin: false,\r\n      }\r\n    }else{\r\n      // update state\r\n      this.state = {\r\n        isLogin: state.isLogin,\r\n        token: state.token,\r\n        expire: state.expire,\r\n      }\r\n    }\r\n  }\r\n\r\n  login(){\r\n    /* todo */\r\n    // should replace by request\r\n    this.state = {\r\n      isLogin: true,\r\n      token: \"abc\",\r\n      expire: Date.now() + 10000,\r\n    }\r\n\r\n    // save login state to localStorage\r\n    const state = JSON.stringify(this.state);\r\n    localStorage.setItem(\"loginState\", state);\r\n    this.onLogin();\r\n  }\r\n}\r\n\r\nexport let account = new Account();\r\n"],"sourceRoot":""}